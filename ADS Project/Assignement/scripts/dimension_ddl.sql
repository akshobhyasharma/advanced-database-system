--------------------------------------------------------------
-- Database table removal script

-- Auto-Generated by QSEE-SuperLite (c) 2001-2004 QSEE-Technologies Ltd.

-- note: spaces within table names have been replaced by underscores (_)

-- Target DB: SQL2

-- Entity Model :Entity Relationship Diagram

-- Use this script to drop the tables created by -
--   'C:\Users\LENOVO\Desktop\ddl\dimension_ddl.sql'

-- Dropping a table has the effect of removing it from the Database.  All existing data is lost
-- as well as the definition of the table itself (stored as meta-data).  Dropping the tables allows
-- them to be re-created within the Database, even if they already exist.


--------------------------------------------------------------

-- Drop tables --

DROP TABLE DIM_TIME cascade constraints;

DROP TABLE DIM_CASE cascade constraints;

DROP TABLE DIM_REGION cascade constraints;

DROP TABLE DIM_OFFICER cascade constraints;

DROP TABLE DIM_STATION cascade constraints;

DROP TABLE FACT_CRIME cascade constraints;

DROP TABLE DIM_WITNESS cascade constraints;


--------------------------------------------------------------
-- End of DDL DROP file auto-generation
--------------------------------------------------------------


--------------------------------------------------------------
-- Database creation Script

-- Auto-Generated by QSEE-SuperLite (c) 2001-2004 QSEE-Technologies Ltd.

-- Verbose generation: ON

-- note: spaces within table/column names have been replaced by underscores (_)

-- Target DB: SQL2

-- Entity Model :Entity Relationship Diagram

-- To drop the tables generated by this script run -
--   'C:\Users\LENOVO\Desktop\ddl\dimension_ddl_drop.sql'

--------------------------------------------------------------



--------------------------------------------------------------
-- Table Creation --

-- Each entity on the model is represented by a table that needs to be created within the Database.
-- Within SQL new tables are created using the CREATE TABLE command.
-- When a table is created its name and its attributes are defined.
-- The values of which are derived from those specified on the model.
-- Certain constraints are sometimes also specified, such as identification of primary keys.

-- Create a Database table to represent the "DIM_TIME" entity.
CREATE TABLE DIM_TIME(
	time_id	INTEGER NOT NULL,
	year	INTEGER,
	quarter	INTEGER,
	month	INTEGER,
	-- Specify the PRIMARY KEY constraint for table "DIM_TIME".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_DIM_TIME PRIMARY KEY (time_id)
);

-- Create a Database table to represent the "DIM_CASE" entity.
CREATE TABLE DIM_CASE(
	case_id	INTEGER NOT NULL,
	case_status	VARCHAR(40),
	case_type	VARCHAR(40),
	case_key	INTEGER,
	case_source	VARCHAR(40),
	-- Specify the PRIMARY KEY constraint for table "DIM_CASE".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_DIM_CASE PRIMARY KEY (case_id)
);

-- Create a Database table to represent the "DIM_REGION" entity.
CREATE TABLE DIM_REGION(
	region_id	INTEGER NOT NULL,
	region_name	VARCHAR(40),
	area_name	VARCHAR(40),
	region_key	INTEGER,
	region_source	VARCHAR(40),
	-- Specify the PRIMARY KEY constraint for table "DIM_REGION".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_DIM_REGION PRIMARY KEY (region_id)
);

-- Create a Database table to represent the "DIM_OFFICER" entity.
CREATE TABLE DIM_OFFICER(
	officer_id	INTEGER NOT NULL,
	officer_name	VARCHAR(40),
	officer_key	INTEGER,
	officer_source	VARCHAR(40),
	-- Specify the PRIMARY KEY constraint for table "DIM_OFFICER".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_DIM_OFFICER PRIMARY KEY (officer_id)
);

-- Create a Database table to represent the "DIM_STATION" entity.
CREATE TABLE DIM_STATION(
	station_id	INTEGER NOT NULL,
	station_name	VARCHAR(40),
	station_key	INTEGER,
	station_source	VARCHAR(40),
	-- Specify the PRIMARY KEY constraint for table "DIM_STATION".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_DIM_STATION PRIMARY KEY (station_id)
);

-- Create a Database table to represent the "FACT_CRIME" entity.
CREATE TABLE FACT_CRIME(
	fact_crime_id	INTEGER NOT NULL,
	region_id	INTEGER NOT NULL,
	officer_id	INTEGER NOT NULL,
	case_id	INTEGER NOT NULL,
	time_id	INTEGER NOT NULL,
	witness_id	INTEGER NOT NULL,
	station_id	INTEGER NOT NULL,
	number_of_crimes_by_crime_type	INTEGER,
	-- Specify the PRIMARY KEY constraint for table "FACT_CRIME".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_FACT_CRIME PRIMARY KEY (fact_crime_id)
);

-- Create a Database table to represent the "DIM_WITNESS" entity.
CREATE TABLE DIM_WITNESS(
	witness_id	INTEGER NOT NULL,
	witness_key	INTEGER,
	witness_type	VARCHAR(40),
	witness_source	VARCHAR(40),
	-- Specify the PRIMARY KEY constraint for table "DIM_WITNESS".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_DIM_WITNESS PRIMARY KEY (witness_id)
);


--------------------------------------------------------------
-- Alter Tables to add fk constraints --

-- Now all the tables have been created the ALTER TABLE command is used to define some additional
-- constraints.  These typically constrain values of foreign keys to be associated in some way
-- with the primary keys of related tables.  Foreign key constraints can actually be specified
-- when each table is created, but doing so can lead to dependency problems within the script
-- i.e. tables may be referenced before they have been created.  This method is therefore safer.

-- Alter table to add new constraints required to implement the "FACT_CRIME_DIM_REGION" relationship

-- This constraint ensures that the foreign key of table "FACT_CRIME"
-- correctly references the primary key of table "DIM_REGION"

ALTER TABLE FACT_CRIME ADD CONSTRAINT fk1_FACT_CRIME_to_DIM_REGION FOREIGN KEY(region_id) REFERENCES DIM_REGION(region_id) ON DELETE cascade;

-- Alter table to add new constraints required to implement the "FACT_CRIME_DIM_CASE" relationship

-- This constraint ensures that the foreign key of table "FACT_CRIME"
-- correctly references the primary key of table "DIM_CASE"

ALTER TABLE FACT_CRIME ADD CONSTRAINT fk2_FACT_CRIME_to_DIM_CASE FOREIGN KEY(case_id) REFERENCES DIM_CASE(case_id) ON DELETE cascade;

-- Alter table to add new constraints required to implement the "FACT_CRIME_DIM_TIME" relationship

-- This constraint ensures that the foreign key of table "FACT_CRIME"
-- correctly references the primary key of table "DIM_TIME"

ALTER TABLE FACT_CRIME ADD CONSTRAINT fk3_FACT_CRIME_to_DIM_TIME FOREIGN KEY(time_id) REFERENCES DIM_TIME(time_id) ON DELETE cascade;

-- Alter table to add new constraints required to implement the "FACT_CRIME_DIM_WITNESS" relationship

-- This constraint ensures that the foreign key of table "FACT_CRIME"
-- correctly references the primary key of table "DIM_WITNESS"

ALTER TABLE FACT_CRIME ADD CONSTRAINT fk4_FACT_CRIME_to_DIM_WITNESS FOREIGN KEY(witness_id) REFERENCES DIM_WITNESS(witness_id) ON DELETE cascade;

-- Alter table to add new constraints required to implement the "FACT_CRIME_DIM_STATION" relationship

-- This constraint ensures that the foreign key of table "FACT_CRIME"
-- correctly references the primary key of table "DIM_STATION"

ALTER TABLE FACT_CRIME ADD CONSTRAINT fk5_FACT_CRIME_to_DIM_STATION FOREIGN KEY(station_id) REFERENCES DIM_STATION(station_id) ON DELETE cascade;

-- Alter table to add new constraints required to implement the "FACT_CRIME_DIM_OFFICER" relationship

-- This constraint ensures that the foreign key of table "FACT_CRIME"
-- correctly references the primary key of table "DIM_OFFICER"

ALTER TABLE FACT_CRIME ADD CONSTRAINT fk6_FACT_CRIME_to_DIM_OFFICER FOREIGN KEY(officer_id) REFERENCES DIM_OFFICER(officer_id) ON DELETE cascade;


--------------------------------------------------------------
-- End of DDL file auto-generation
--------------------------------------------------------------
drop sequence dim_witness_seq;
drop sequence dim_region_seq;
drop sequence dim_officer_seq;
drop sequence dim_case_seq;
drop sequence dim_station_seq;
drop sequence dim_time_seq;
drop sequence fact_crime_seq;


create sequence dim_witness_seq start with 1 increment by 1;
create sequence dim_region_seq start with 1 increment by 1;
create sequence dim_officer_seq start with 1 increment by 1;
create sequence dim_case_seq start with 1 increment by 1;
create sequence dim_station_seq start with 1 increment by 1;
create sequence dim_time_seq start with 1 increment by 1;
create sequence fact_crime_seq start with 1 increment by 1;

create or replace trigger dim_region_pk
    before insert on dim_region
    for each row
begin
    select dim_region_seq.nextval
    into :new.region_id
    from dual;
end;
/
create or replace trigger dim_officer_pk
    before insert on dim_officer
    for each row
begin
    select dim_officer_seq.nextval
    into:new.officer_id
    from dual;
end;
/
create or replace trigger dim_witness_pk
    before insert on dim_witness
    for each row
begin
    select dim_witness_seq.nextval
    into :new.witness_id
    from dual;
end;
/
create or replace trigger dim_station_pk
    before insert on dim_station
    for each row
begin
    select dim_station_seq.nextval
    into :new.station_id
    from dual;
end;
/
create or replace trigger dim_case_pk
    before insert on dim_case
    for each row
begin
    select dim_case_seq.nextval
    into :new.case_id
    from dual;
end;
/
create or replace trigger dim_time_pk
    before insert on dim_time
    for each row
begin
    select dim_time_seq.nextval
    into:new.time_id
    from dual;
end;
/
create or replace trigger fact_crime
    before insert on fact_crime
    for each row
begin
    select fact_crime_seq.nextval
    into:new.fact_crime_id
    from dual;
end;
/